name: iot-example-graphical-snap  # you probably want to 'snapcraft register <name>'
version: git # just for humans, typically '1.2+git' or '1.3.2'
summary: Single-line elevator pitch for your amazing snap # 79 char long summary
description: |
  This is my-snap's description. You have a paragraph or two to tell the
  most important story about your snap. Keep it under 100 words though,
  we live in tweetspace and your description wants to look good in the snap
  store.
confinement: strict
compression: lzo
grade: stable
base: core24

apps:
  iot-example-graphical-snap:
    command-chain: &_command-chain
      - bin/gpu-2404-wrapper
      - bin/wayland-launch
    command: &_command usr/games/neverputt
    desktop: &_desktop usr/share/applications/neverputt.desktop
    plugs: &_plugs
      - opengl
      - wayland
      - hardware-observe
      - audio-playback
      - joystick
    environment: &_environment
      PULSE_SERVER: unix:$XDG_RUNTIME_DIR/../pulse/native
      PULSE_SYSTEM: 1
      PULSE_RUNTIME_PATH: /var/run/pulse
      LD_LIBRARY_PATH: ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}${SNAP}/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}:${SNAP}/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/pulseaudio

  daemon:
    daemon: simple
    restart-delay: 3s
    restart-condition: always
    command-chain: *_command-chain
    command: *_command
    desktop: *_desktop
    plugs: *_plugs
    environment: *_environment

# This is one of four snippets that relate to providing the userspace graphics needed by your application.
# You can treat this as "magic" so long as you don't need to make changes.
# On the Mir website there's a lot more detail on [the gpu-2404 Snap interface](https://mir-server.io/docs/the-gpu-2404-snap-interface) and it's use.
plugs:
  gpu-2404:
    interface: content
    target: $SNAP/gpu-2404
    default-provider: mesa-2404

environment:
  # Other, generally useful environment settings...
  # XDG config
  XDG_CACHE_HOME:  $SNAP_USER_COMMON/.cache
  XDG_CONFIG_HOME: $SNAP_USER_DATA/.config
  XDG_CONFIG_DIRS: $SNAP/etc/xdg
  XDG_DATA_DIRS:   $SNAP/usr/local/share:$SNAP/usr/share
  # XKB config
  XKB_CONFIG_ROOT: $SNAP/usr/share/X11/xkb

# The `layout` ensures that files can be found by applications where they are expected by the toolkit or application.
layout:
  /usr/share/libdrm:
    bind: $SNAP/gpu-2404/libdrm
  /usr/share/drirc.d:
    symlink: $SNAP/gpu-2404/drirc.d
  # Other, generally useful paths
  /usr/share/fonts:
    bind: $SNAP/usr/share/fonts
  /usr/share/icons:
    bind: $SNAP/usr/share/icons
  /usr/share/sounds:
    bind: $SNAP/usr/share/sounds
  /etc/fonts:
    bind: $SNAP/etc/fonts
  # neverputt [sic]
  /usr/share/games/neverball:
    bind: $SNAP/usr/share/games/neverball
  /usr/share/alsa:
    bind: $SNAP/usr/share/alsa

parts:
  # Applications are installed from repositories (such as the Ubuntu Archive) are controlled using `stage-packages:`
  # which lists the neverputt package and SDL2 toolkit libraries it needs.
  #
  # Using the `plugin: dump` means the `source: neverputt` directory is copied into the snap. For Neverputt this
  # contains a configuration file that sets the application to fullscreen.
  neverputt:
    plugin: dump
    source: neverputt
    stage-packages:
      - neverputt
      - libsdl2-2.0-0
      - libsdl2-image-2.0-0
      - libsdl2-mixer-2.0-0
      - libsdl2-net-2.0-0
      - xkb-data
    override-stage: |
      craftctl default
      sed -i s:Icon=neverputt:Icon=/usr/share/games/neverball/icon/neverputt.png:g $CRAFT_STAGE/usr/share/applications/neverputt.desktop

  # Some utility scripts for setting up the Wayland environment
  setup:
    plugin: dump
    source: wayland-launch
    override-build: |
      # The plugs needed to run Wayland. (wayland-launch checks them, setup.sh connects them)
      # You may add further plugs here if you want these options
      PLUGS="opengl wayland gpu-2404 hardware-observe audio-playback joystick"
      sed --in-place "s/%PLUGS%/$PLUGS/g" $CRAFT_PART_BUILD/bin/wayland-launch
      sed --in-place "s/%PLUGS%/$PLUGS/g" $CRAFT_PART_BUILD/bin/setup.sh
      craftctl default
    stage-packages:
      - inotify-tools

  gpu-2404:
    after:
      # Your application packaging
      - setup
    source: https://github.com/canonical/gpu-snap.git
    plugin: dump
    override-prime: |
      craftctl default
      ${CRAFT_PART_SRC}/bin/gpu-2404-cleanup mesa-2404
      cd "$CRAFT_PRIME/usr/share/"
      rm -rf bug drirc.d glvnd libdrm lintian man
      rm -rf applications apport bash-completion dbus-1 doc-base doc gtk-doc\
             help pkgconfig libthai metainfo themes thumbnailers xml
    prime:
      - bin/gpu-2404-wrapper

platforms:
  amd64:
  armhf:
  arm64:
