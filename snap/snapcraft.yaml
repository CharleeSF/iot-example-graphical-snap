name: iot-example-graphical-snap  # you probably want to 'snapcraft register <name>'
version: git # just for humans, typically '1.2+git' or '1.3.2'
summary: IoT example using Wine # 79 char long summary
description: IoT example using Wine
confinement: strict
compression: lzo
grade: stable
base: core22

apps:
  iot-example-graphical-snap:
    command-chain: &_command-chain
      - bin/graphics-core22-wrapper
      - bin/wayland-launch
      - bin/setup-mir
      - bin/setup-x11
      - usr/local/bin/x11_kiosk_launch
    command: &_command $SNAP/bin/sommelier run-exe
    plugs: &_plugs
      - opengl
      - wayland
      - network-bind   # For Mir (to serve X11)
    environment: &_environment
      LANG: en_US
      RUN_EXE: $SNAP/DNSBench.exe

  daemon:
    daemon: simple
    restart-delay: 3s
    restart-condition: always
    command-chain: *_command-chain
    command: *_command
    plugs: *_plugs
    environment: *_environment

# This is one of four snippets that relate to providing the userspace graphics needed by your application.
# You can treat this as "magic" so long as you don't need to make changes.
# On the Mir website there's a lot more detail on [the graphics-core22 Snap interface](https://mir-server.io/docs/the-graphics-core22-snap-interface) and it's use.
plugs:
  graphics-core22:
    interface: content
    target: $SNAP/graphics
    default-provider: mesa-core22
  wine-runtime-c22:
    interface: content
    target: $SNAP/wine-runtime
    default-provider: wine-platform-runtime-core22
  wine-7-stable-c22:
    interface: content
    target: $SNAP/wine-platform
    default-provider: wine-platform-7-stable-core22

environment:
  # Other, generally useful environment settings...
  # XDG config
  XDG_CACHE_HOME:  $SNAP_USER_COMMON/.cache
  XDG_CONFIG_HOME: $SNAP_USER_DATA/.config
  XDG_CONFIG_DIRS: $SNAP/etc/xdg
  XDG_DATA_DIRS:   $SNAP/usr/local/share:$SNAP/usr/share
  # XKB config
  XKB_CONFIG_ROOT: $SNAP/usr/share/X11/xkb
  WINEDLLOVERRIDES: "$WINEDLLOVERRIDES;mscoree,mshtml="    # Prevent pop-ups about Wine Mono and Wine Gecko


# The `layout` ensures that files can be found by applications where they are expected by the toolkit or application.
layout:
  /usr/share/libdrm:
    bind: $SNAP/graphics/libdrm
  /usr/share/drirc.d:
    symlink: $SNAP/graphics/drirc.d
  # Other, generally useful paths
  /usr/share/fonts:
    bind: $SNAP/usr/share/fonts
  /usr/share/icons:
    bind: $SNAP/usr/share/icons
  /usr/share/sounds:
    bind: $SNAP/usr/share/sounds
  /etc/fonts:
    bind: $SNAP/etc/fonts
  # X11
  /usr/bin/xkbcomp:
    symlink: $SNAP/usr/bin/xkbcomp
  /usr/share/X11:
    bind: $SNAP/usr/share/X11

parts:
  sommelier-core:
    plugin: make
    source: https://github.com/snapcrafters/sommelier-core.git
    override-build: |
      # The build environment may not have sudo (as we're already root, we don't need it)
      sed --in-place "s/sudo //g" $CRAFT_PART_BUILD/Makefile
      craftctl default
    source-branch: "1.0"

  dnsbench:
    plugin: nil
    build-packages:
      - curl
    override-pull: |
      curl \
        --location \
        --remote-name \
        https://www.grc.com/files/DNSBench.exe
    override-build: |
      install \
      --mode 0644 \
      --verbose \
      DNSBench.exe \
      "${SNAPCRAFT_PART_INSTALL}"/DNSBench.exe

  # A simple kiosk for X11 on Wayland
  mir-kiosk-x11:
    plugin: cmake
    source: https://github.com/MirServer/mir_kiosk_x11.git
    build-packages:
      - pkg-config
      - libmiral-dev
      - make
      - g++
    stage-packages:
      - libmiral4
      - mir-platform-graphics-wayland
      - dmz-cursor-theme
      - fonts-freefont-ttf
      - xwayland
      - libbz2-1.0

  # Some utility scripts for setting up the X11/Mir
  env-setup:
    plugin: dump
    source: env-setup
    override-build: |
      sed --in-place s/\$\{CRAFT_ARCH_TRIPLET}/${CRAFT_ARCH_TRIPLET}/g $CRAFT_PART_BUILD/bin/*
      craftctl default

  # Some utility scripts for setting up the Wayland environment
  setup:
    plugin: dump
    source: wayland-launch
    override-build: |
      # The plugs needed to run Wayland. (wayland-launch checks them, setup.sh connects them)
      # You may add further plugs here if you want these options
      PLUGS="opengl wayland graphics-core22 network-bind wine-runtime-c22 wine-7-stable-c22"
      sed --in-place "s/%PLUGS%/$PLUGS/g" $CRAFT_PART_BUILD/bin/wayland-launch
      sed --in-place "s/%PLUGS%/$PLUGS/g" $CRAFT_PART_BUILD/bin/setup.sh
      craftctl default
    stage-packages:
      - inotify-tools

  graphics-core22:
    after:
      - sommelier-core
      - dnsbench
      - mir-kiosk-x11
      - env-setup
      - setup
    source: https://github.com/MirServer/graphics-core22.git
    plugin: dump
    override-prime: |
      craftctl default
      ${CRAFT_PART_SRC}/bin/graphics-core22-cleanup mesa-core22 nvidia-core22
      cd "$CRAFT_PRIME/usr/share/"
      rm -rf bug drirc.d glvnd libdrm lintian man
      rm -rf applications apport bash-completion dbus-1 doc-base doc gtk-doc\
             help pkgconfig libthai metainfo themes thumbnailers xml
    prime:
      - bin/graphics-core22-wrapper

architectures:
  - build-on: amd64
